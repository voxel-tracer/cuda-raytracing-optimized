POLYGON RENDERER (PHASE I)
- one line summary
  apply all the optimization techniques I learned so far to produce high quality renders really quickly
  (this is the same work I've been doing for the past year but with great looking renders)
- required features
 . support large poly models, think sculptures (CGTrader)
 . support a few interesting materials that produce great renders
   (tinted glass, subsurface scattering, plastic)
 .  basic lighting and background setup that produces great renders
   (transparent bg with invisible plane that catches shadows and reflections)
 . apply all the optimizations I learned so far along with any other optimization that may improve the
   performance of the renderer (SAH BVH building, russian roulette, ...)

PBR MATERIAL EDITOR (PHASE II)
- one line summary
  allow user to configure PBR materials and replace existing sculpture materials with those
  producing incredible renders (think CGTrader Marvel/DC Comics renders) really fast

---------------------------------------------------------------------------------------------------------
PHASE I: POLYGON RENDERER
---------------------------------------------------------------------------------------------------------
 REQUIREMENTS
 ------------
- support large triangle mesh .obj models
- support a few interesting materials that produce great renderers
 . DONE tinted glass with Beer-lambert model
 . Peter Shirley's brute force subsurface scattering
 . also see this answer that goes into a lot of details about SSS: https://computergraphics.stackexchange.com/questions/5214/a-recent-approach-for-subsurface-scattering
 . DONE existing plastic/coat (diffuse + glass)
- DONE basic lighting and background setup that produces great renderers

 DELIVERABLES
 ------------
- great looking renders that may be too slow to renderer

* at this point I should have great looking renderer that are too slow
 . now I can start optimizing the renderer as much as possible
 
* once the renderer is fast enough I can add support for an OpenGL viewer
 . this will showcase how quickly can my renderer produce interesting images

* I can also integrate my work in Lighthouse 2 as a separate CUDA core
 . this will allow me quickly add support for UI and models/materials and interesting scenes

 TASKS
 -----
 - DONE render obj model
  . DONE load obj as triangle list
  . DONE copy triangles to constant memory
    . constant mem size = 65536B, each triangle uses 3 vec3 = 3x3x float = 3x3x4B = 36B => we can store 1280 tris
  . DONE ray-triangle intersection with a single material
- DONE floor
  . DONE use 2 triangles to represent the floor
  . DONE make it big enough to catch any shadows
  . DONE use coat material
- DONE light and next event estimation
 . DONE extend scatter() to update a hasShadow
 . DONE color() compute shadowRay if hasShadow
 . DONE hit() has a isShadow that will stop at first intersection
 . DONE color() accounts for light emissiviness if hasShadow and no shadow hit
- DONE Lambert-Beer absorption
 . DONE GLASS material (vec3 absorptionColor, float absorptionDistance)
  . absorptionCoefficient = -log(absorptionColor) / absorptionDistance
 . DONE when ray exits the model (frontFace = false), hit.t represents the distance travelled inside the model
  . compute transmission = exp(-absorptionCoefficient * hit.t)
  . attentuation *= transmission

 IMPROVEMENTS
 ------------
- when importing a model, define its orientation (up vector) and make sure its loading
  in the correct orientation. Makes it easier to use a standard camera position and orient
  the environment map
- camera distance is computed automatically such that the whole model is visible in the viewport
- transparent background (useful to create interesting renders in Gimp)
  . when ray hits sky it's value becomes transparent
  . when ray hits floor and is scattered as diffuse it becomes transparent
  . when ray hits floor and is scattered as specular 
- resume rendering from saved file (useful when we want to add more samples to an already expensive render)
---------------------------------------------------------------------------------------------------------


Ideal target is to finish PHASE I by end of Ramadan (5 weeks)

PHASE I
- DONE extend my renderer to support polygon models
- good light setup and transparent background
- do not worry about optimization and focus on models that can fit in constant memory

OTHER DELIVERABLES IN NO PARTICULAR ORDER
- tinted glass material
- support large polygon models
- subsurface scattering (Peter Shirley Volume rendering)
- raylib mesh viewer that supports rendering directly to the viewport
 . we can start with render goes straight to disk
- advanced materials: implement Disney BRDF and add UI to configure materials
- allow setting different material per original model color


----------------------------------------------------------------------------------------------------------
STATS FOR TINTED GLASS ON COAT w/ 1024spp

primary:          983.040.000
primary(nohit):   747.703.389
secondary:      1.965.692.427
shadows:          851.167.283
power < 0.1:      369.910.132

same stats for 4096spp
primary:        3.932.160.000
primary(nohit): 2.990.816.128
secondary:      3.567.756.802
shadows:        3.404.672.183
power < 0.1:    1.479.651.414
